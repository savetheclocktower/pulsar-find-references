import etch from 'etch';
import type { Reference } from 'atom-ide-base';
type SplitDirection = 'left' | 'right' | 'up' | 'down' | 'none';
type ReferencesViewProperties = {
    ref?: string;
    references: Reference[];
    symbolName: string;
};
export default class ReferencesView {
    static URI: string;
    static instances: Set<ReferencesView>;
    static setReferences(references: Reference[], symbolName: string): void;
    private subscriptions;
    private references;
    private symbolName;
    private ignoredNameMatchers;
    private splitDirection;
    private filteredAndGroupedReferences;
    private activeNavigationIndex;
    private lastNavigationIndex;
    private collapsedIndices;
    private pinned;
    private previewStyle;
    element: HTMLElement;
    refs: {
        [key: string]: HTMLElement;
    };
    constructor();
    moveUp(): void;
    moveDown(): void;
    findVisibleNavigationIndex(delta: number): number | null;
    isValidElementIndex(index: number): boolean;
    scrollOffsetOfElementAtIndex(index: number): number | null;
    findElementIndexNearHeight(top: number): number;
    collapseActive(): void;
    expandActive(): void;
    collapseResult(index: number): void;
    expandResult(index: number): void;
    toggleResult(index: number): void;
    pageUp(): void;
    pageDown(): void;
    moveToTop(): void;
    moveToBottom(): void;
    confirmResult(): void;
    copyResult(): void;
    copyPath(): void;
    openInNewTab(): void;
    getElementAtIndex(index: number): HTMLElement | null;
    get activeElement(): HTMLElement | null;
    update({ references, symbolName }: ReferencesViewProperties): Promise<void>;
    destroy(): void;
    fontFamilyChanged(fontFamily: string): void;
    ignoredNamesChanged(ignoredNames: string[]): void;
    splitDirectionChanged(splitDirection: SplitDirection): void;
    handleClick(event: MouseEvent): void;
    activate(): Promise<void>;
    handlePinReferencesClicked(): void;
    openResult(filePath: string, row: number, rangeSpec: string, { pending }?: {
        pending: boolean;
    }): Promise<void>;
    filterAndGroupReferences(): Map<string, Reference[]>;
    get props(): ReferencesViewProperties;
    writeAfterUpdate(): void;
    copy(): ReferencesView;
    getTitle(): string;
    getIconName(): string;
    getURI(): string;
    focus(): void;
    render(): etch.EtchJSXElement;
}
export {};
