"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const etch_1 = __importDefault(require("etch"));
class ResultsPaneView {
    constructor() {
        this.isLoading = false;
        this.subscriptions = new atom_1.CompositeDisposable();
        etch_1.default.initialize(this);
    }
    update() {
    }
    destroy() {
        this.subscriptions.dispose();
    }
    render() {
        var _a;
        return ($.div({ tabIndex: -1, className: `preview-pane pane-item ${matchCount === 0 ? 'no-results' : ''}` }, $.div({ className: 'preview-header' }, $.span({
            ref: 'previewCount',
            className: 'preview-count inline-block',
            innerHTML: (_a = getSearchResultsMessage()) !== null && _a !== void 0 ? _a : 'Project search results'
        }), $.button({
            ref: 'dontOverrideTab',
            style: { display: matchCount === 0 || this.isLoading ? 'none' : '' },
            className: 'btn'
        }, `Don’t override this tab`), $.div({
            ref: 'previewControls',
            className: 'preview-controls',
            style: { display: matchCount === 0 ? '' : 'none' },
        }, this.searchContextLineCountBefore > 0 ?
            $.div({ className: 'btn-group' }, $.button({
                ref: 'decrementLeadingContextLines',
                className: 'btn'
            }, '–'), $.button({
                ref: 'toggleLeadingContextLines',
                className: 'btn'
            }, $.svg({
                className: 'icon',
                innerHTML: '<use xlink:href="#find-and-replace-context-lines-before" />'
            })), $.button({
                ref: 'incrementLeadingContextLines',
                className: 'btn'
            }, '+')) : null, this.searchContextLineCountAfter > 0 ?
            $.div({ className: 'btn-group' }, $.button({
                ref: 'decrementTrailingContextLines',
                className: 'btn'
            }, '–'), $.button({
                ref: 'toggleTrailingContextLines',
                className: 'btn'
            }, $.svg({
                className: 'icon',
                innerHTML: '<use xlink:href="#find-and-replace-context-lines-after" />'
            })), $.button({
                ref: 'incrementTrailingContextLines',
                className: 'btn' + (this.model.getFindOptions().trailingContextLineCount >= this.searchContextLineCountAfter ? ' disabled' : '')
            }, '+')) : null, $.div({ className: 'btn-group' }, $.button({ ref: 'collapseAll', className: 'btn' }, 'Collapse All'), $.button({ ref: 'expandAll', className: 'btn' }, 'Expand All'))), $.div({ className: 'inline-block', style: showIf(this.isLoading) }, $.div({ className: 'loading loading-spinner-tiny inline-block' }), $.div({
            className: 'inline-block',
            style: showIf(this.isLoading)
        }), $.span({ ref: 'searchedCount', className: 'searched-count' }, '0'), $.span({}, ' paths searched')))),
            $.ul({
                ref: 'errorList',
                className: 'error-list list-group padded',
                style: showIf(this.searchErrors.length > 0)
            }, ...this.searchErrors.map(message => ($.li({ className: 'text-error' }, escapeHtml(message))))),
            etch_1.default.dom(ResultsView, { ref: 'resultsView', model: this.model }),
            $.ul({
                className: 'centered background-message no-results-overlay',
                style: showIf(matchCount === 0)
            }, $.li({}, 'No results')));
    }
    copy() {
        return new ResultsPaneView();
    }
    getTitle() {
        return 'Find References Results';
    }
    getIconName() {
        return 'search';
    }
    getURI() {
        return ResultsPaneView.URI;
    }
    focus() {
        var _a;
        (_a = this.refs.resultsView) === null || _a === void 0 ? void 0 : _a.element.focus();
    }
}
ResultsPaneView.URI = "atom://pulsar-find-references/results";
exports.default = ResultsPaneView;
//# sourceMappingURL=data:application/json;base64,