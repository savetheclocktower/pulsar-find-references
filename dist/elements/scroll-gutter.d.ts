import { Color, Disposable, TextEditor } from 'atom';
import type { Reference } from 'atom-ide-base';
type ScrollGutterConfig = {
    enable: boolean;
    markerColor: Color;
    markerOpacity: number;
};
export type ScrollGutterVisibilityEvent = CustomEvent<{
    visible: boolean;
    editor: TextEditor;
}>;
export default class ScrollGutter extends HTMLElement {
    attached: boolean;
    editor: TextEditor | null;
    private editorView;
    private scrollbar;
    private scrollView;
    private lastEditorWidth;
    private lastEditorHeight;
    private screenRanges;
    private subscriptions;
    private intersectionObserver?;
    height: number;
    width: number;
    private resizeObserver;
    private frameRequested;
    private config;
    private canvas;
    private canvasContext;
    private visible;
    private created;
    private redrawTimeout?;
    constructor();
    attachToEditor(editor: TextEditor): void;
    attachToScrollbar(): void;
    redrawAfterConfigChange(): void;
    getConfig(editor: TextEditor): ScrollGutterConfig;
    connectedCallback(): void;
    subscribeToMediaQuery(): Disposable;
    initializeCanvas(): void;
    measureHeightAndWidth(visibilityChanged?: boolean, forceUpdate?: boolean): void;
    requestForcedUpdate(): void;
    requestUpdate(): void;
    update(): void;
    clearReferences(): void;
    highlightReferences(references: Reference[] | null): void;
    drawScreenRanges(clear?: boolean): void;
    getEditorHeight(): number;
    getScrollbarHeight(): number;
    drawRectForEditorRow(row: number, totalRows: number): void;
    setVisibility(shouldBeVisible: boolean): void;
    isVisible(): boolean;
    queryParentSelector(selector: string): HTMLElement | null;
    getScopedSettingsForKey<T>(key: string, editor: TextEditor): T;
}
export {};
